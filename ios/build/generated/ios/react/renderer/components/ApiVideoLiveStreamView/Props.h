
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

enum class ApiVideoLiveStreamViewCamera { Front, Back };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ApiVideoLiveStreamViewCamera &result) {
  auto string = (std::string)value;
  if (string == "front") { result = ApiVideoLiveStreamViewCamera::Front; return; }
  if (string == "back") { result = ApiVideoLiveStreamViewCamera::Back; return; }
  abort();
}

static inline std::string toString(const ApiVideoLiveStreamViewCamera &value) {
  switch (value) {
    case ApiVideoLiveStreamViewCamera::Front: return "front";
    case ApiVideoLiveStreamViewCamera::Back: return "back";
  }
}
enum class ApiVideoLiveStreamViewSampleRate { SampleRate5500 = 5500, SampleRate11025 = 11025, SampleRate22050 = 22050, SampleRate44100 = 44100 };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ApiVideoLiveStreamViewSampleRate &result) {
  assert(value.hasType<int>());
  auto integerValue = (int)value;
  switch (integerValue) {
    case 5500:
      result = ApiVideoLiveStreamViewSampleRate::SampleRate5500;
      return;
    case 11025:
      result = ApiVideoLiveStreamViewSampleRate::SampleRate11025;
      return;
    case 22050:
      result = ApiVideoLiveStreamViewSampleRate::SampleRate22050;
      return;
    case 44100:
      result = ApiVideoLiveStreamViewSampleRate::SampleRate44100;
      return;
  }
  abort();
}

static inline std::string toString(const ApiVideoLiveStreamViewSampleRate &value) {
  switch (value) {
    case ApiVideoLiveStreamViewSampleRate::SampleRate5500: return "5500";
    case ApiVideoLiveStreamViewSampleRate::SampleRate11025: return "11025";
    case ApiVideoLiveStreamViewSampleRate::SampleRate22050: return "22050";
    case ApiVideoLiveStreamViewSampleRate::SampleRate44100: return "44100";
  }
}
struct ApiVideoLiveStreamViewVideoResolutionStruct {
  int width{0};
  int height{0};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ApiVideoLiveStreamViewVideoResolutionStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_width = map.find("width");
  if (tmp_width != map.end()) {
    fromRawValue(context, tmp_width->second, result.width);
  }
  auto tmp_height = map.find("height");
  if (tmp_height != map.end()) {
    fromRawValue(context, tmp_height->second, result.height);
  }
}

static inline std::string toString(const ApiVideoLiveStreamViewVideoResolutionStruct &value) {
  return "[Object ApiVideoLiveStreamViewVideoResolutionStruct]";
}

struct ApiVideoLiveStreamViewVideoStruct {
  int bitrate{0};
  int fps{0};
  ApiVideoLiveStreamViewVideoResolutionStruct resolution{};
  Float gopDuration{0.0};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ApiVideoLiveStreamViewVideoStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_bitrate = map.find("bitrate");
  if (tmp_bitrate != map.end()) {
    fromRawValue(context, tmp_bitrate->second, result.bitrate);
  }
  auto tmp_fps = map.find("fps");
  if (tmp_fps != map.end()) {
    fromRawValue(context, tmp_fps->second, result.fps);
  }
  auto tmp_resolution = map.find("resolution");
  if (tmp_resolution != map.end()) {
    fromRawValue(context, tmp_resolution->second, result.resolution);
  }
  auto tmp_gopDuration = map.find("gopDuration");
  if (tmp_gopDuration != map.end()) {
    fromRawValue(context, tmp_gopDuration->second, result.gopDuration);
  }
}

static inline std::string toString(const ApiVideoLiveStreamViewVideoStruct &value) {
  return "[Object ApiVideoLiveStreamViewVideoStruct]";
}

struct ApiVideoLiveStreamViewAudioStruct {
  int bitrate{0};
  ApiVideoLiveStreamViewSampleRate sampleRate{ApiVideoLiveStreamViewSampleRate::SampleRate44100};
  bool isStereo{false};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ApiVideoLiveStreamViewAudioStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_bitrate = map.find("bitrate");
  if (tmp_bitrate != map.end()) {
    fromRawValue(context, tmp_bitrate->second, result.bitrate);
  }
  auto tmp_sampleRate = map.find("sampleRate");
  if (tmp_sampleRate != map.end()) {
    fromRawValue(context, tmp_sampleRate->second, result.sampleRate);
  }
  auto tmp_isStereo = map.find("isStereo");
  if (tmp_isStereo != map.end()) {
    fromRawValue(context, tmp_isStereo->second, result.isStereo);
  }
}

static inline std::string toString(const ApiVideoLiveStreamViewAudioStruct &value) {
  return "[Object ApiVideoLiveStreamViewAudioStruct]";
}
class ApiVideoLiveStreamViewProps final : public ViewProps {
 public:
  ApiVideoLiveStreamViewProps() = default;
  ApiVideoLiveStreamViewProps(const PropsParserContext& context, const ApiVideoLiveStreamViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  ApiVideoLiveStreamViewCamera camera{ApiVideoLiveStreamViewCamera::Back};
  ApiVideoLiveStreamViewVideoStruct video{};
  bool isMuted{false};
  ApiVideoLiveStreamViewAudioStruct audio{};
  Float zoomRatio{0.0};
  bool enablePinchedZoom{false};
};

} // namespace facebook::react
