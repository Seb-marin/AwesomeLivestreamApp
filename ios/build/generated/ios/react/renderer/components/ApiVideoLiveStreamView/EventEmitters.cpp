
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include <react/renderer/components/ApiVideoLiveStreamView/EventEmitters.h>


namespace facebook::react {

void ApiVideoLiveStreamViewEventEmitter::onConnectionSuccess(OnConnectionSuccess $event) const {
  dispatchEvent("connectionSuccess", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void ApiVideoLiveStreamViewEventEmitter::onConnectionFailed(OnConnectionFailed $event) const {
  dispatchEvent("connectionFailed", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "code", $event.code);
    return $payload;
  });
}


void ApiVideoLiveStreamViewEventEmitter::onDisconnect(OnDisconnect $event) const {
  dispatchEvent("disconnect", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void ApiVideoLiveStreamViewEventEmitter::onPermissionsDenied(OnPermissionsDenied $event) const {
  dispatchEvent("permissionsDenied", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    auto permissions = jsi::Array(runtime, $event.permissions.size());
    size_t permissionsIndex = 0;
    for (auto permissionsValue : $event.permissions) {
      permissions.setValueAtIndex(runtime, permissionsIndex++, permissionsValue);
    }
    $payload.setProperty(runtime, "permissions", permissions);
  
    return $payload;
  });
}


void ApiVideoLiveStreamViewEventEmitter::onStartStreaming(OnStartStreaming $event) const {
  dispatchEvent("startStreaming", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "requestId", $event.requestId);
$payload.setProperty(runtime, "result", $event.result);
$payload.setProperty(runtime, "error", $event.error);
    return $payload;
  });
}

} // namespace facebook::react
